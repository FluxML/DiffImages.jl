var documenterSearchIndex = {"docs":
[{"location":"colors/","page":"Colorspace Transforms","title":"Colorspace Transforms","text":"CurrentModule = DiffImages","category":"page"},{"location":"colors/#Colorspace-Transforms","page":"Colorspace Transforms","title":"Colorspace Transforms","text":"","category":"section"},{"location":"colors/","page":"Colorspace Transforms","title":"Colorspace Transforms","text":"note: Consistency with the batch dimension\nSince we require the last dimension to be the batch dimension,  kindly unsqueeze the last dimension if you would like to pass a single image.","category":"page"},{"location":"colors/","page":"Colorspace Transforms","title":"Colorspace Transforms","text":"Modules = [DiffImages]\nPages = [\"colors/conversions.jl\"]","category":"page"},{"location":"colors/#DiffImages.channelify-Union{Tuple{AbstractArray{CT, N}}, Tuple{N}, Tuple{CT}} where {CT<:ColorTypes.Colorant, N}","page":"Colorspace Transforms","title":"DiffImages.channelify","text":"channelify(m::AbstractArray{CT,N}) where {CT <: Colorant, N}\n\nChannelify function.\n\nInput should be in WHN order implies (* batch). Output will be in the order (* channels batch).\n\nExamples\n\njulia> input_size = (16, 16, 2)\n(16, 16, 2)\n\njulia> size(channelify(HSV.(rand(BGR,input_size...))))\n(16, 16, 3, 2)\n\n\n\n\n\n","category":"method"},{"location":"colors/#DiffImages.colorify-Union{Tuple{CT}, Tuple{Type{CT}, AbstractArray}} where CT<:ColorTypes.Colorant","page":"Colorspace Transforms","title":"DiffImages.colorify","text":"colorify(color::Type{CT}, m::AbstractArray) where CT <: Colorant\n\nColorify function.\n\nExpecting an input of the type (* channels batch). Converts the array to the color specified.\n\nExamples\n\njulia> input_size = (25, 25, 3, 7)\n(25, 25, 3, 7)\n\njulia> size(colorify(HSV, rand(input_size...)))\n(25, 25, 7)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DiffImages","category":"page"},{"location":"#DiffImages:-Extending-Automatic-Differentiation-support-to-the-JuliaImages-ecosystem","page":"Home","title":"DiffImages: Extending Automatic Differentiation support to the JuliaImages ecosystem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DiffImages.jl is a differentiable computer vision library made in pure Julia. It is being developed with the aim of extending AD support to the JuliaImages ecosystem. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This library is under heavy development and is not intended for use yet. A stable release later will enable the users to readily use this.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can watch our development at the Discussions tab of our repository. We welcome all and everyone who intend to help us with their discussions. Open Source code simply cannot be made if the community does not give its inputs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We hope you remain safe and healthy.","category":"page"}]
}
